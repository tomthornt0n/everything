
default rel

extern __ImageBase

global wWinMain

OS_CharQueueCap: equ 4096
OS_WindowSizeCap: equ 3840
OS_DefaultWindowWidth: equ 1024
OS_DefaultWindowHeight: equ 768

extern OS_WindowHandle
extern OS_DeviceContext
extern OS_BitmapInfo
extern OS_CharQueue
extern OS_CharQueueRead
extern OS_CharQueueWrite
extern OS_Framebuffer

%define OS_WindowWidth OS_BitmapInfo + 4
%define OS_WindowHeight OS_BitmapInfo + 8

extern OS_WindowProc
extern OS_Init
extern OS_UpdateEvents
extern OS_Render

%macro Next 0
mov rax, rsi
add rsi, 8
jmp [rax]
%endmacro

%macro ReturnStackPush 1
lea rbp, [rbp - 8]
mov [rbp], %1
%endmacro

%macro ReturnStackPop 1
mov %1, [rbp]
lea rbp, [rbp + 8]
%endmacro

%define link 0

DictionaryEntryFlags_Immediate: equ 0x80
DictionaryEntryFlags_Hidden: equ 0x20
DictionaryEntryFlags_LenMask: equ 0x1f

;//~
section .data

State: dq 0
Here: dq 0
Latest: dq 0
S0: dq 0

REPL_InputBufferRead: dq 0 
REPL_InputBufferWrite: dq 0 

REPL_NumberBase: dq 10

;//~
section .bss

ReturnStackCap: equ 8192
ReturnStack: resb ReturnStackCap
ReturnStackTop:

REPL_InputBufferCap: equ 4096
REPL_InputBuffer: resb REPL_InputBufferCap

REPL_WordBufferCap: equ 256
REPL_WordBuffer: resb REPL_WordBufferCap

;//~
section .rodata

ColdStart:
dq Quit

;// %1 name, %2 name len, %3 flags, %4 label
%macro DefWord 4
align 8
global WordName_ %+ %4
WordName_ %+ %4:
dq link
%define link WordName_ %+ %4
db %2 | %3
db name
align 8
global Word_ %+ %4
Word_ %+ %4:
dq DoCol
%endmacro

D_FontData:
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x18, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x00
db 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x36, 0x36, 0x7f, 0x36, 0x7f, 0x36, 0x36, 0x00
db 0x0c, 0x3e, 0x03, 0x1e, 0x30, 0x1f, 0x0c, 0x00
db 0x00, 0x63, 0x33, 0x18, 0x0c, 0x66, 0x63, 0x00
db 0x1c, 0x36, 0x1c, 0x6e, 0x3b, 0x33, 0x6e, 0x00
db 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x18, 0x0c, 0x06, 0x06, 0x06, 0x0c, 0x18, 0x00
db 0x06, 0x0c, 0x18, 0x18, 0x18, 0x0c, 0x06, 0x00
db 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00
db 0x00, 0x0c, 0x0c, 0x3f, 0x0c, 0x0c, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x06
db 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00
db 0x60, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x01, 0x00
db 0x3e, 0x63, 0x73, 0x7b, 0x6f, 0x67, 0x3e, 0x00
db 0x0c, 0x0e, 0x0c, 0x0c, 0x0c, 0x0c, 0x3f, 0x00
db 0x1e, 0x33, 0x30, 0x1c, 0x06, 0x33, 0x3f, 0x00
db 0x1e, 0x33, 0x30, 0x1c, 0x30, 0x33, 0x1e, 0x00
db 0x38, 0x3c, 0x36, 0x33, 0x7f, 0x30, 0x78, 0x00
db 0x3f, 0x03, 0x1f, 0x30, 0x30, 0x33, 0x1e, 0x00
db 0x1c, 0x06, 0x03, 0x1f, 0x33, 0x33, 0x1e, 0x00
db 0x3f, 0x33, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x00
db 0x1e, 0x33, 0x33, 0x1e, 0x33, 0x33, 0x1e, 0x00
db 0x1e, 0x33, 0x33, 0x3e, 0x30, 0x18, 0x0e, 0x00
db 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x00
db 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x06
db 0x18, 0x0c, 0x06, 0x03, 0x06, 0x0c, 0x18, 0x00
db 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00
db 0x06, 0x0c, 0x18, 0x30, 0x18, 0x0c, 0x06, 0x00
db 0x1e, 0x33, 0x30, 0x18, 0x0c, 0x00, 0x0c, 0x00
db 0x3e, 0x63, 0x7b, 0x7b, 0x7b, 0x03, 0x1e, 0x00
db 0x0c, 0x1e, 0x33, 0x33, 0x3f, 0x33, 0x33, 0x00
db 0x3f, 0x66, 0x66, 0x3e, 0x66, 0x66, 0x3f, 0x00
db 0x3c, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3c, 0x00
db 0x1f, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1f, 0x00
db 0x7f, 0x46, 0x16, 0x1e, 0x16, 0x46, 0x7f, 0x00
db 0x7f, 0x46, 0x16, 0x1e, 0x16, 0x06, 0x0f, 0x00
db 0x3c, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7c, 0x00
db 0x33, 0x33, 0x33, 0x3f, 0x33, 0x33, 0x33, 0x00
db 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x1e, 0x00
db 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1e, 0x00
db 0x67, 0x66, 0x36, 0x1e, 0x36, 0x66, 0x67, 0x00
db 0x0f, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7f, 0x00
db 0x63, 0x77, 0x7f, 0x7f, 0x6b, 0x63, 0x63, 0x00
db 0x63, 0x67, 0x6f, 0x7b, 0x73, 0x63, 0x63, 0x00
db 0x1c, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1c, 0x00
db 0x3f, 0x66, 0x66, 0x3e, 0x06, 0x06, 0x0f, 0x00
db 0x1e, 0x33, 0x33, 0x33, 0x3b, 0x1e, 0x38, 0x00
db 0x3f, 0x66, 0x66, 0x3e, 0x36, 0x66, 0x67, 0x00
db 0x1e, 0x33, 0x07, 0x0e, 0x38, 0x33, 0x1e, 0x00
db 0x3f, 0x2d, 0x0c, 0x0c, 0x0c, 0x0c, 0x1e, 0x00
db 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3f, 0x00
db 0x33, 0x33, 0x33, 0x33, 0x33, 0x1e, 0x0c, 0x00
db 0x63, 0x63, 0x63, 0x6b, 0x7f, 0x77, 0x63, 0x00
db 0x63, 0x63, 0x36, 0x1c, 0x1c, 0x36, 0x63, 0x00
db 0x33, 0x33, 0x33, 0x1e, 0x0c, 0x0c, 0x1e, 0x00
db 0x7f, 0x63, 0x31, 0x18, 0x4c, 0x66, 0x7f, 0x00
db 0x1e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1e, 0x00
db 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x40, 0x00
db 0x1e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1e, 0x00
db 0x08, 0x1c, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff
db 0x0c, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x1e, 0x30, 0x3e, 0x33, 0x6e, 0x00
db 0x07, 0x06, 0x06, 0x3e, 0x66, 0x66, 0x3b, 0x00
db 0x00, 0x00, 0x1e, 0x33, 0x03, 0x33, 0x1e, 0x00
db 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6e, 0x00
db 0x00, 0x00, 0x1e, 0x33, 0x3f, 0x03, 0x1e, 0x00
db 0x1c, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0f, 0x00
db 0x00, 0x00, 0x6e, 0x33, 0x33, 0x3e, 0x30, 0x1f
db 0x07, 0x06, 0x36, 0x6e, 0x66, 0x66, 0x67, 0x00
db 0x0c, 0x00, 0x0e, 0x0c, 0x0c, 0x0c, 0x1e, 0x00
db 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1e
db 0x07, 0x06, 0x66, 0x36, 0x1e, 0x36, 0x67, 0x00
db 0x0e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x1e, 0x00
db 0x00, 0x00, 0x33, 0x7f, 0x7f, 0x6b, 0x63, 0x00
db 0x00, 0x00, 0x1f, 0x33, 0x33, 0x33, 0x33, 0x00
db 0x00, 0x00, 0x1e, 0x33, 0x33, 0x33, 0x1e, 0x00
db 0x00, 0x00, 0x3b, 0x66, 0x66, 0x3e, 0x06, 0x0f
db 0x00, 0x00, 0x6e, 0x33, 0x33, 0x3e, 0x30, 0x78
db 0x00, 0x00, 0x3b, 0x6e, 0x66, 0x06, 0x0f, 0x00
db 0x00, 0x00, 0x3e, 0x03, 0x1e, 0x30, 0x1f, 0x00
db 0x08, 0x0c, 0x3e, 0x0c, 0x0c, 0x2c, 0x18, 0x00
db 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6e, 0x00
db 0x00, 0x00, 0x33, 0x33, 0x33, 0x1e, 0x0c, 0x00
db 0x00, 0x00, 0x63, 0x6b, 0x7f, 0x7f, 0x36, 0x00
db 0x00, 0x00, 0x63, 0x36, 0x1c, 0x36, 0x63, 0x00
db 0x00, 0x00, 0x33, 0x33, 0x33, 0x3e, 0x30, 0x1f
db 0x00, 0x00, 0x3f, 0x19, 0x0c, 0x26, 0x3f, 0x00
db 0x38, 0x0c, 0x0c, 0x07, 0x0c, 0x0c, 0x38, 0x00
db 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00
db 0x07, 0x0c, 0x0c, 0x38, 0x0c, 0x0c, 0x07, 0x00
db 0x6e, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

;//~
section .text

;// %1 name, %2 name len, %3 flags, %4 label
%macro DefCode 4
align 8
global Name_ %+ %4
Name_ %+ %4:
dq link
%define link Name_ %+ %4
db %2 | %3
db %1
align 8
global Word_ %+ %4
Word_ %+ %4:
dq Code_ %+ %4
Code_ %+ %4:
%endmacro

DefCode "Drop", 4, 0, Drop
pop rax
Next

DefCode "Swap", 4, 0, Swap
pop rax
pop rbx
push rax
push rbx
Next

DefCode "Dup", 3, 0, Dup
mov rax, [rsp]
push rax
Next

DefCode "Over", 4, 0, Over
mov rax, [rsp + 8]
push rax
Next

DefCode "Rot", 3 , 0, Rot
pop rax
pop rbx
pop rcx
push rbx
push rax
push rcx
Next

DefCode "-Rot", 4, 0, NRot
pop rax
pop rbx
pop rcx
push rax
push rcx
push rbx
Next

DefCode "2Drop", 5, 0, TwoDrop
pop rax
pop rax
Next

DefCode "2Dup", 4, 0, TwoDup
mov rax, [rsp]
mov rbx, [rsp + 8]
push rbx
push rax
Next

DefCode "2Swap", 5, 0, TwoSwap
pop rax
pop rbx
pop rcx
pop rdx
push rbx
push rax
push rdx
push rcx
Next

DefCode "?Dup", 4, 0, DupIfNotZero
mov rax, [rsp]
test rax, rax
jz .skip
push rax
.skip:
Next

DefCode "1+", 2, 0, Incr
inc qword [rsp]
Next

DefCode "1-", 2, 0, Decr
dec qword [rsp]
Next

DefCode "8+", 2, 0, Add8
add qword [rsp], 8
Next

DefCode "8-", 2, 0, Sub8
sub qword [rsp], 8
Next

DefCode "+", 1, 0, Plus
pop rax
add qword [rsp], rax
Next

DefCode "-", 1, 0, Minus
pop rax
sub qword [rsp], rax
Next

DefCode "*", 1, 0, Multiply
pop rax
pop rbx
imul rax, rbx
push rax
Next

DefCode "/Mod", 4, 0, DivMod
xor rdx, rdx
pop rbx
pop rax
idiv rbx
push rdx 	; push remainder
push rax 	; push quotient
Next

DefCode "/", 1, 0, Div
xor rdx, rdx
pop rbx
pop rax
idiv rbx
push rax 	; push quotient
Next

DefCode "Mod", 3, 0, Mod
xor rdx, rdx
pop rbx
pop rax
idiv rbx
push rdx	; push remainder
Next

DefCode "=", 1, 0, EqualTo
pop rax
pop rbx
cmp rbx, rax
sete al
movzx rax, al
push rax
Next

DefCode "<>", 2, 0, NotEqualTo
pop rax
pop rbx
cmp rbx, rax
setne al
movzx rax, al
push rax
Next

DefCode "<", 1, 0, LessThan
pop rax
pop rbx
cmp rbx, rax
setl al
movzx rax, al
push rax
Next

DefCode ">", 1, 0, GreaterThan
pop rax
pop rbx
cmp rbx, rax
setg al
movzx rax, al
push rax
Next

DefCode "<=", 2, 0, LessThanOrEqualTo
pop rax
pop rbx
cmp rbx, rax
setl al
movzx rax, al
push rax
Next

DefCode ">=", 2, 0, GreaterThanOrEqualTo
pop rax
pop rbx
cmp rbx, rax
setge al
movzx rax, al
push rax
Next

DefCode "0=", 2, 0, EqualToZero
pop rax
test rax, rax
setz al
movzx rax, al
push rax
Next

DefCode "0<>", 3, 0, NotEqualToZero
pop rax
test rax, rax
setnz al
movzx rax, al
push rax
Next

DefCode "0<", 2, 0, LessThanZero
pop rax
test rax, rax
setl al
movzx rax, al
push rax
Next

DefCode "0>", 2, 0, GreaterThanZero
pop rax
test rax, rax
setg al
movzx rax, al
push rax
Next

DefCode "0<=", 3, 0, LessThanOrEqaulToZero
pop rax
test rax, rax
setle al
movzx rax, al
push rax
Next

DefCode "0>=", 3, 0, GreaterThanOrEqaulToZero
pop rax
test rax, rax
setge al
movzx rax, al
push rax
Next

DefCode "And", 3, 0, And
pop rax
and qword [rsp], rax
Next

DefCode "Or", 2, 0, Or
pop rax
or qword [rsp], rax
Next

DefCode "XOr", 3, 0, XOr
pop rax
xor qword [rsp], rax
Next

DefCode "Invert", 3, 0, Invert
not qword [rsp]
Next

DefCode "Exit", 4, 0, Exit
ReturnStackPop rsi
Next

DefCode "Literal", 7, 9, Literal
mov rax, rsi
add rsi, 8
push rsi
Next

DefCode "!", 1, 0, Store
mov [rbx], rax
Next

DefCode "@", 1, 0, Fetch
pop rbx
mov rax, [rbx]
push rax
Next

DefCode "+!", 2, 0, AddStore
pop rbx
pop rax
add [rbx], rax
Next

DefCode "-!", 2, 0, SubStore
pop rbx
pop rax
add [rbx], rax
Next

DefCode "C!", 2, 0, ByteStore
pop rbx
pop rax
mov [rbx], al
Next

DefCode "C@", 2, 0, ByteFetch
pop rbx
xor rax, rax
mov al, [rbx]
push rax
Next

DefCode "CMove", 5, 0, ByteMove
mov rdx, rsi	; preserve rsi
pop rcx
pop rdi
pop rsi
rep movsb
mov rsi, rdx	; restore rsi
Next

DefCode "State", 5, 0, State
mov rax, State
push rax
Next

DefCode "Here", 4, 0, Here
mov rax, Here
push rax
Next

DefCode "Latest", 6, 0, Latest
mov rax, Latest
push rax
Next

DefCode "S0", 2, 0, S0
mov rax, S0
push rax
Next

DefCode "REPL:NumberBase", 4, 0, Base
mov rax, REPL_NumberBase
push rax
Next

DefCode "R0", 2, 0, R0
mov rax, ReturnStackTop
push rax
Next

DefCode "DoCol", 5, 0, DoCol
mov rax, DoCol
push rax
Next

DefCode "DictionaryEntryFlags:Immediate", 30, 0, DictionaryEntryFlags_Immediate
mov rax, DictionaryEntryFlags_Immediate
push rax
Next

DefCode "DictionaryEntryFlags:Hidden", 27, 0, DictionaryEntryFlags_Hidden
mov rax, DictionaryEntryFlags_Hidden
push rax
Next

DefCode "DictionaryEntryFlags:LenMask", 28, 0, DictionaryEntryFlags_LenMask
mov rax, DictionaryEntryFlags_Hidden
push rax
Next

DefCode "ReturnStackPush", 15, 0, ReturnStackPush
pop rax
ReturnStackPush rax
Next

DefCode "ReturnStackPop", 14, 0, ReturnStackPop
ReturnStackPop rax
push rax
Next

DefCode "ReturnStackDrop", 15, 0, ReturnStackDrop
lea rbp, [rbp + 8]
Next

DefCode "ReturnStackPointerGet", 21, 0, ReturnStackPointerGet
push rbp
Next

DefCode "ReturnStackPointerSet", 21, 0, ReturnStackPointerSet
pop rbp
Next

DefCode "DataStackPointerSet", 19, 0, DataStackPointerSet
pop rsp
Next

DefCode "DataStackPointerGet", 19, 0, DataStackPointerGet
push rsp
Next

DefCode "OS:CharQueuePop", 15, 0, OS_CharQueuePop
call Impl_OS_CharQueuePop
push rax
Next

Impl_OS_CharQueuePop:
mov rcx, [OS_CharQueueRead]
cmp rcx, [OS_CharQueueWrite]
jge .NothingInQueue
mov rax, rcx
mov rdx, OS_CharQueue
and rax, OS_CharQueueCap - 1	; relies on OS_CharQueueCap being power of two
inc rcx
mov [OS_CharQueueRead], rcx
mov rax, [rdx + rax*8]
ret
.NothingInQueue:
xor rax, rax
ret

DefCode "REPL:InputBufferPop", 19, 0, REPL_InputBufferPop
call Impl_REPL_InputBufferPop
push rax
Next

Impl_REPL_InputBufferPop:
mov rcx, [REPL_InputBufferRead]
cmp rcx, [REPL_InputBufferWrite]
jge .NothingInBuffer
mov rax, rcx
mov rdx, REPL_InputBuffer
and rax, REPL_InputBufferCap - 1	; relies on REPL_InputBufferCap being power of two
inc rcx
mov [REPL_InputBufferRead], rcx
mov rax, [rdx + rax*8]
ret
.NothingInBuffer:
xor rax, rax
ret

DefCode "REPL:InputBufferPush", 20, 0, REPL_InputBufferPush
mov rcx, [rsp]
call Impl_REPL_InputBufferPush
Next

Impl_REPL_InputBufferPush:
mov rax, [REPL_InputBufferWrite]
and rax, REPL_InputBufferCap - 1	; relies on REPL_InputBufferCap being power of two
inc qword [REPL_InputBufferWrite]
mov r8, REPL_InputBuffer
mov [r8 + rax*8], rcx
ret

DefCode "REPL:WordInput->String", 22, 0, REPL_StringFromWordInput
call Impl_REPL_StringFromWordInput
mov rax, REPL_WordBuffer
push rax
push rdi
Next

Impl_REPL_StringFromWordInput:
.Start:
mov rdi, REPL_WordBuffer
mov r8, REPL_WordBuffer + REPL_WordBufferCap
call Impl_REPL_InputBufferPop
test rax, rax
je .End
cmp al, ' '
jle .Start
.Loop:
cmp rdi, r8
jge .End
stosb
call Impl_REPL_InputBufferPop
test rax, rax
je .End
cmp al, ' '
jg .Loop
.End:
mov rcx, REPL_WordBuffer
sub rdi, rcx
ret

DefCode "REPL:String->Number", 19, 0, REPL_NumberFromString
pop rcx
pop rdi
call Impl_REPL_NumberFromString
push rax
Next

;// TODO negative numbers, better error handling
Impl_REPL_NumberFromString:
xor rax, rax
xor rbx, rbx
mov rdx, [REPL_NumberBase]
.Loop:
imul rax, rdx
mov bl, [rdi]
inc rdi
sub bl, '0'
jl .End
cmp bl, 10
jl .Body
sub bl, 'A' - '0'
jb .End
add bl, 10
.Body:
cmp dl, bl
jge .End
add rax, rbx
dec rcx
jnz .Loop
.End:
ret

DefCode "String->DictionaryEntry", 23, 0, DictionaryEntryFromString
pop rcx
pop rdi
call Impl_DictionaryEntryFromString
push rax
Next

Impl_DictionaryEntryFromString:
push rsi
mov rdx, Latest
.Loop:
test rdx, rdx
xor rax, rax
mov al, [rdx + 4]
and al, (DictionaryEntryFlags_LenMask | DictionaryEntryFlags_Hidden)
cmp cl, al
jne .NextEntry
push rcx
push rdi
lea rsi, [rdx + 5]
repe cmpsb
pop rdi
pop rcx
jne .NextEntry
pop rsi
mov rax, rdx
ret
.NextEntry:
mov rdx, [rdx]
jmp .Loop
jz .NotFound
.NotFound:
pop rsi
xor rax, rax
ret

DefCode "DictionaryEntry->CodeField", 26, 0, CodeFieldFromDictionaryEntry
pop rdi
call Impl_CodeFieldFromDictionaryEntry
push rdi
Next

Impl_CodeFieldFromDictionaryEntry:
xor rax, rax
add edi, 4
mov al, [edi]

ret

DefCode "D:Char", 6, 0, D_Char
pop r8
mov rdx, [rsp]
mov rcx, [rsp + 8]
add qword [rsp + 8], 8
call Impl_D_Char
Next

Impl_D_Char:
cmp rcx, 127
ja .LBB0_19
xor r9, r9
xor rax, rax
mov r9d, dword [OS_WindowHeight]
mov eax, dword [OS_WindowWidth]
shl rcx, 3
sub r9, r8
imul r9, rax
shl rdx, 2
lea rdx, [rdx + 4*r9]
lea r8, [OS_Framebuffer]
add rdx, r8
add rdx, 28
shl rax, 2
neg rax
xor r8d, r8d
lea r9, [D_FontData]
jmp .LBB0_2
.LBB0_16:
test r10b, r10b
js .LBB0_17
.LBB0_18:
inc r8
add rdx, rax
cmp r8, 8
je .LBB0_19
.LBB0_2:
lea r10, [rcx + r8]
movzx r10d, byte [r9 + r10]
test r10b, 1
jne .LBB0_3
test r10b, 2
jne .LBB0_5
.LBB0_6:
test r10b, 4
jne .LBB0_7
.LBB0_8:
test r10b, 8
jne .LBB0_9
.LBB0_10:
test r10b, 16
jne .LBB0_11
.LBB0_12:
test r10b, 32
jne .LBB0_13
.LBB0_14:
test r10b, 64
je .LBB0_16
jmp .LBB0_15
.LBB0_3:
mov dword [rdx - 28], -1
test r10b, 2
je .LBB0_6
.LBB0_5:
mov dword [rdx - 24], -1
test r10b, 4
je .LBB0_8
.LBB0_7:
mov dword [rdx - 20], -1
test r10b, 8
je .LBB0_10
.LBB0_9:
mov dword [rdx - 16], -1
test r10b, 16
je .LBB0_12
.LBB0_11:
mov dword [rdx - 12], -1
test r10b, 32
je .LBB0_14
.LBB0_13:
mov dword [rdx - 8], -1
test r10b, 64
je .LBB0_16
.LBB0_15:
mov dword [rdx - 4], -1
jmp .LBB0_16
.LBB0_17:
mov dword [rdx], -1
jmp .LBB0_18
.LBB0_19:
ret

Quit:
;// TODO

DoCol:
ReturnStackPush rsi
add rax, 4
mov rsi, rax
Next

wWinMain:
push rbx
sub rsp, 32

mov rbp, ReturnStackTop

call OS_Init

EventLoop:
call OS_UpdateEvents
mov rbx, rax

call Impl_OS_CharQueuePop
test rax, rax
jz .InputEnd
cmp rax, 10
je .EndOfLine
cmp rax, 8
je .Backspace
mov rcx, rax
call Impl_REPL_InputBufferPush
jmp .InputEnd
.EndOfLine:
;// for now, just clear input buffer, eventually actually do something
mov rax, [REPL_InputBufferWrite]
mov [REPL_InputBufferRead], rax
jmp .InputEnd
.Backspace:
mov rax, [REPL_InputBufferRead]
mov rcx, [REPL_InputBufferWrite]
cmp rax, rcx
jge .InputEnd
dec rcx
mov [REPL_InputBufferWrite], rcx
.InputEnd:

mov r12, [REPL_InputBufferRead]
mov r13, [REPL_InputBufferWrite]
mov r14, 64
mov r15, 64
.RenderLoop:
cmp r12, r13
jge .RenderLoopEnd
mov rax, r12
mov rdx, REPL_InputBuffer
and rax, REPL_InputBufferCap - 1	; relies on REPL_InputBufferCap being power of two
inc r12
mov rcx, [rdx + rax*8]
mov rdx, r14
mov r8, r15
call Impl_D_Char
add r14, 8
jmp .RenderLoop
.RenderLoopEnd:

call OS_Render

test rbx, rbx
jz EventLoop

add rsp, 32
pop rbx
ret
